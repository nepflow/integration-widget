import styles from './autoGeneratedGuide.module.css'
import Icon from '../../Icon/Icon'
import { useContext, useEffect, useMemo, useState } from 'react'
import Content from './content/Content'
import { type IntegrationGuide } from '../../../models/integrationGuide'
import { useNavigate, useSearchParams } from 'react-router-dom'
import RootServiceContext from '../../../contexts/rootServiceContext'
import getGuide from '../../../clients/api/queries/getGuide'
import ServiceContext from '../../../contexts/serviceContext'
import TriggerToActionSelector from '../../TriggerToActionSelector/TriggerToActionSelector'
import { type ServiceAction, type ServiceTrigger } from '../../../models/service'
import Header from '../../Header'
import Card from '../../Card'

export default function AutoGeneratedGuide () {
  const navigate = useNavigate()

  const [searchParams] = useSearchParams()

  const rootService = useContext(RootServiceContext)!
  const connectedService = useContext(ServiceContext)!

  const [guideData, setGuideData] = useState<{ loading: boolean, guide?: IntegrationGuide }>({ loading: false })
  const [guidedRecipeId, setGuidedRecipeId] = useState(searchParams.get('triggerServiceId') || undefined)

  const [defaultTrigger, defaultAction] = useMemo(() => {
    const triggerServiceId = searchParams.get('triggerServiceId')!
    const triggerId = searchParams.get('triggerId')!
    const actionId = searchParams.get('actionId')!

    return [
      triggerServiceId === connectedService.id ? connectedService.triggers.find(t => t.id === triggerId) : rootService.triggers.find(t => t.id === triggerId),
      triggerServiceId !== connectedService.id ? connectedService.actions.find(a => a.id === actionId) : rootService.actions.find(a => a.id === actionId)
    ]
  }, [])
  const [trigger, setTrigger] = useState<ServiceTrigger | undefined>(defaultTrigger)
  const [action, setAction] = useState<ServiceAction | undefined>(defaultAction)

  useEffect(() => {
    // Reset guidedRecipeId if action or trigger were selected
    setGuidedRecipeId(undefined)
  }, [action, trigger])

  useEffect(() => {
    if (trigger && action) {
      setGuideData({ loading: true })
      getGuide(
        trigger.serviceId,
        action.serviceId,
        trigger.id,
        action.id,
        guidedRecipeId
      ).then(guide => { setGuideData({ guide, loading: false }) })
    } else {
      setGuideData({
        guide: undefined,
        loading: false
      })
    };
  }, [trigger, action])

  const handleBackClick = () => {
    if (action && trigger) {
      navigate(`/${rootService.id}/service/${connectedService.id}`)
    } else {
      // Navigate to catalog if action or trigger are not selected
      navigate(`/${rootService.id}/`)
    }
  }

  return (
    <div className={styles.container}>
      <Header
        onBackClick={handleBackClick}
        title={'Integration guide'}
      />

      <Card className={styles.card}>
        <TriggerToActionSelector
          action={action}
          trigger={trigger}
          rootService={rootService}
          connectedService={connectedService}
          onChangeAction={setAction}
          onChangeTrigger={setTrigger}
        />

        {(guideData.loading || guideData.guide) && (
          <div className={styles.space} />
        )}

        {guideData.loading && (
          <div className={styles.guideLoading}>
            <Icon className={styles.guideLoadingIcon} icon='loading' size={18} />
            <span>Generating guide...</span>
          </div>
        )}

        {guideData.guide && trigger && action && (
          <Content
            trigger={trigger}
            action={action}
            service={trigger?.serviceId === connectedService.id ? connectedService : rootService}
            secondService={trigger?.serviceId === connectedService.id ? rootService : connectedService}
            steps={guideData.guide?.steps}
          />
        )}
      </Card>
    </div>
  )
}
